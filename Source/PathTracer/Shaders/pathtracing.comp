
// -------------------------------------------------------------------------
//    Compute shader setup
// -------------------------------------------------------------------------

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D radianceImage;
layout(rgba32f, binding = 1) uniform image2D primaryAlbedoImage;
layout(rgba32f, binding = 2) uniform image2D primaryNormalImage;

// -------------------------------------------------------------------------
//    Path tracing function
// -------------------------------------------------------------------------

void PathTrace(Ray ray, inout vec3 radianceResult, inout vec3 primaryAlbedoResult, inout vec3 primaryNormalResult, inout uint rngState)
{
	vec3 radiance	= vec3(0.0f); // Energy
	vec3 throughput	= vec3(1.0f); // Recursively accumulated color

	vec3 f = vec3(1.0f);	// BRDF value
	float pdfBRDF = 1.0f;	// PDF

	const uint MaxBounceCount = 3;
	for (uint bounce = 0; bounce < MaxBounceCount; bounce++)
	{
		HitInfo hitInfo = HitBvhClosest(ray);

		// Missed - HDRI light contribution
		if (!hitInfo.didHit)
		{
			float pdfLight = 0.0f;
			vec3 colorLight = EvaluateHdri(ray.direction, pdfLight);

			float misWeight = 1.0f;

			// Only MIS if there is data from previous bounce
			if (bounce > 0u)
			{
				// Multiple importance sampling
				misWeight = MisMixWeight(pdfBRDF, pdfLight);
			}

			if (misWeight > 0.0f)
			{
				// Indirect lighting rays are emitted according to BRDF distribution
				radiance += misWeight * throughput * colorLight * f / pdfBRDF;
			}

			break;
		}

		// Evaluate material to use for ray
		Material evaluatedMaterial = GetEvaluatedMaterial(hitInfo);

		// Common trace variables
		vec3 V = -hitInfo.hitDirection;
		vec3 N = hitInfo.shadingNormal;

		// Emissive light contribution
		vec3 emission = evaluatedMaterial.emission;
		radiance += throughput * emission;

		// Direct light contribution
		Ray hdriRay;
		hdriRay.origin = OffsetRay(hitInfo.hitPosition, hitInfo.geometryNormal);
		hdriRay.direction = SampleHdri(rngState);

		// Perform intersection test to check for occlusion
		if (dot(N, hdriRay.direction) > 0.0f)
		{
			// Cast shadow ray
			HitInfo hdriHitInfo = HitBvhAny(hdriRay);

			// Only continue light calculation if there is no occlusion toward light
			if (!hdriHitInfo.didHit)
			{
				// Sample light to get direction L
				vec3 L = hdriRay.direction;

				// Obtain light color and probability density based on direction L
				float pdfLight = 0.0f;
				vec3 colorLight = EvaluateHdri(L, pdfLight);

				// Prepare evaluation BRDF data
				BrdfData evaluationBrdfData = PrepareEvaluationBrdfData(evaluatedMaterial, V, N, L);

				// Obtain the BRDF value and probability density based on direction L
				pdfBRDF = 0.0f;
				f = EvaluateDisneyBrdf(evaluatedMaterial, evaluationBrdfData, pdfBRDF);

				if (pdfBRDF > 0.0f)
				{
					// Multiple importance sampling
					float misWeight = MisMixWeight(pdfLight, pdfBRDF);
					if (misWeight > 0.0f)
					{
						radiance += misWeight * throughput * colorLight * f / pdfLight;
					}
				}
			}
		}

		// Prepare sample BRDF data
		BrdfData samplingBrdfData = PrepareEvaluationBrdfData(evaluatedMaterial, V, N, vec3(0.0f));

		// Sample BRDF to get a direction L
		vec3 L = SampleDisneyBrdf(evaluatedMaterial, samplingBrdfData, rngState);

		// Prepare evaluation BRDF data
		BrdfData evaluationBrdfData = PrepareEvaluationBrdfData(evaluatedMaterial, V, N, L);

		// Obtain the BRDF value and probability density for the direction L
		pdfBRDF = 0.0f;
		f = EvaluateDisneyBrdf(evaluatedMaterial, evaluationBrdfData, pdfBRDF);
		if (pdfBRDF <= 0.0f) break;

		// Russian roulette
		// Random early exit if ray colour is nearly 0 (can't contribute much to final result)
		float p = max(throughput.r, max(throughput.g, throughput.b));
		if (RandomValue(rngState) >= p) 
		{
			break;
		}
		throughput *= 1.0f / p;

		// Accumulate result
		throughput *= f / pdfBRDF;

		// Setup ray for the next bounce
		ray.origin = OffsetRay(hitInfo.hitPosition, hitInfo.geometryNormal);
		ray.direction = L;

		// Save data on the first bounce
		if (hitInfo.didHit && bounce == 0)
		{
			primaryAlbedoResult = evaluatedMaterial.albedo;
			primaryNormalResult = hitInfo.shadingNormal;
		}
	}

	radianceResult = radiance;
}

// -------------------------------------------------------------------------
//    Camera
// -------------------------------------------------------------------------

// Generate primary ray using pinhole camera
Ray GeneratePinholeCameraRay(vec2 uv)
{
	// Start from transformed position
	vec4 viewPos = InvProjMatrix * vec4(uv * 2.0f - 1.0f, 0.0f, 1.0f);
	vec3 origin = viewPos.xyz / viewPos.w;
	vec3 direction = normalize(origin); // Normalize to get view direction

	// Compute origin and direction based on view matrix
	Ray ray;
	ray.origin = (inverse(ViewMatrix) * vec4(origin, 1)).xyz;
	ray.direction = (inverse(ViewMatrix) * vec4(direction, 0)).xyz;

	return ray;
}

// Generate primary ray using thin lens model
Ray GenerateThinLensCameraRay(vec2 uv, inout uint rngState)
{
	// Extract camera vectors from view matrix
	vec3 cameraForward = -vec3(ViewMatrix[2][0], ViewMatrix[2][1], ViewMatrix[2][2]);
	vec3 cameraUp = vec3(ViewMatrix[1][0], ViewMatrix[1][1], ViewMatrix[1][2]);
	vec3 cameraRight = cross(cameraUp, cameraForward);

	// Find first point in distance at which we want perfect focus
	Ray ray = GeneratePinholeCameraRay(uv);
	vec3 focalPoint = ray.origin + ray.direction * FocalLength;

	// Sample aperture shape
	vec2 apertureSample = HemispherepointCos(RandomValue(rngState), RandomValue(rngState)).xy * ApertureShape * ApertureSize;

	// Jitter the ray origin within camera plane using aperture sample	
	ray.origin = ray.origin + cameraRight * apertureSample.x + cameraUp * apertureSample.y;

	// Set ray direction from jittered origin towards the focal point
	ray.direction = normalize(focalPoint - ray.origin);

	return ray;
}

// Generates primary ray using either pinhole or thin lens model
Ray GeneratePrimaryRay(vec2 uv, inout uint rngState)
{
	if (ApertureSize == 0.0f)
	{
		return GeneratePinholeCameraRay(uv);
	}
	else
	{
		return GenerateThinLensCameraRay(uv, rngState);
	}
}

// -------------------------------------------------------------------------
//    Main
// -------------------------------------------------------------------------

void main()
{
	// Initialize pixel coordinate information
	ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
	vec2 uv = (texelCoord + 0.5f) / FrameDimensions;

	// Initialize rng state
	uint pixelIndex = texelCoord.y * uint(FrameDimensions.x) + texelCoord.x;
	uint rngState = pixelIndex + FrameCount * 719393;

	// Debug: Output meaningful data for analysis
#if defined(DEBUG_ENABLED)
	Ray debugRay = GeneratePinholeCameraRay(uv);
	vec4 debugValue = DebugOutput(uv, debugRay);

	imageStore(radianceImage, texelCoord, debugValue);
	return;
#endif

	// Apply Anti-Aliasing
	if (bool(AntiAliasingEnabled))
	{
		// Apply random offset in the range [-0.5, 0.5] pixels
		vec2 offset = RandomValueVec2(rngState);
		uv += (offset - 0.5f) / vec2(FrameDimensions);
	}

	// Initialize primary ray
	Ray ray = GeneratePrimaryRay(uv, rngState);

	// Generate primary hit information, with materials
	HitInfo primaryHit = HitBvhClosest(ray);

	// Results
	vec3 radianceResult = vec3(0.0f);
	vec3 primaryAlbedoResult = vec3(0.0f);
	vec3 primaryNormalResult = vec3(0.0f);

	// PathTrace
	PathTrace(ray, radianceResult, primaryAlbedoResult, primaryNormalResult, rngState);
	
	// Temporal accumulation. Weigh the contributions to result in an average over all frames.
	float weight = 1.0f / FrameCount;

	// Radiance accumulation
	vec4 previousRadiance = imageLoad(radianceImage, texelCoord);
	vec4 accumulatedRadiance = mix(previousRadiance, vec4(radianceResult, 1.0f), weight);
	
	// Primary Albedo accumulation
	vec4 previousPrimaryAlbedo = imageLoad(primaryAlbedoImage, texelCoord);
	vec4 accumulatedPrimaryAlbedo = mix(previousPrimaryAlbedo, vec4(primaryAlbedoResult, 1.0f), weight);
	
	// Primary Normal accumulation
	vec4 previousPrimaryNormal = imageLoad(primaryNormalImage, texelCoord);
	vec4 accumulatedPrimaryNormal = mix(previousPrimaryNormal, vec4(primaryNormalResult, 1.0f), weight);

	// Output
	imageStore(radianceImage, texelCoord, accumulatedRadiance);
	imageStore(primaryAlbedoImage, texelCoord, accumulatedPrimaryAlbedo);
	imageStore(primaryNormalImage, texelCoord, accumulatedPrimaryNormal);
}
